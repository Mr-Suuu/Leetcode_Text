// 已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：
// 若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]
// 若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]
// 注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。

// 给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。

// 你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。

// 算法思想：基于二分查找思想，判断最左边元素与mid元素之间的大小关系确定mid左右两边哪边是有序的，再进一步判断与最小元素
class Solution {
    public int findMin(int[] nums) {
        int left = 0, right = nums.length - 1;
        while (left < right){
            int mid = left + ((right - left) >> 1);
            if (nums[mid] < nums[right]){
                // 当前mid为右半部分最小值，因此抛弃右半部分，继续对mid及其左半部分进行判断
                right = mid;
            }else {
                // 若mid大于right的值，则代表最小值一定在右半部分，因此抛弃左半部分，对右半部分进行判断
                left = mid + 1;
            }
        }
        // 当left == right时跳出
        return nums[left];
    }
}