// 给定一个整数数组 prices，其中 prices[i]表示第 i 天的股票价格 ；整数 fee 代表了交易股票的手续费用。

// 你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。

// 返回获得利润的最大值。

// 注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。

// 算法思想：当收益大于fee则卖出，卖出后在最低点买入
class Solution {
    public int maxProfit(int[] prices, int fee) {
        int buy = prices[0] + fee; // 买入价格
        int sum = 0;
        for (int p : prices){
            if (p + fee < buy){
                // 若当前位置买入价格比之前的买入价格低，则改为在这个时候才买入
                buy = p + fee;
            }else if (p > buy){
                // 当前价格比买入点（包括手续费）还高，则记录为卖出的点，但不是立即卖出
                sum += p - buy; // 计算收益
                buy = p; // 更换买入点，若后面后比这个位置更低的点则将后面那个点设置为买入点，此时才会真正卖出，否则将一直记录收益但不卖出
            }
        }
        return sum;
    }
}